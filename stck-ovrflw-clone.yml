openapi: "3.0.0"
info:
  description: "This is the documentation of a simple clone stack over server.
  If you have any questions, you can reach out to us via interview@softcom.ng"
  version: 1.0.0
  title: Stack Overflow Clone
  contact:
    email: "oluwapelumi@interview.softcom.ng"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: /
tags:
  - name: "question"
    description: "Possible functionalities on questions"
  - name: "user"
    description: "Operations about user"
paths:
  /users:
    post:
      summary: Create a user [Sign Up]
      operationId: createUsers
      tags:
        - user
      requestBody:
        $ref: "#/components/requestBodies/createUser"
      responses:
        '201':
          description: Successful creation response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/login:
    post:
      summary: User login [Sign in]
      operationId: userLogin
      tags:
        - user
      requestBody:
        $ref: "#/components/requestBodies/userLogin"
      responses:
        '200':
          description: User authentication was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthUser"
        '404':
          description: User with the login credentials does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /questions:
    post:
      summary: Ask a question
      operationId: askQuestion
      tags:
        - question
      parameters:
        - in: path
          name: userId
          description: Id of the user asking the question
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/askQuestion"
      responses:
        '200':
          description: Question successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionResponse"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User with the provided id does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: View questions
      operationId: viewQuestions
      tags:
        - question
      responses:
        '200':
          description: List of previously asked questions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionsResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /questions/:id/answer:
    post:
      summary: Answer question
      operationId: answerQuestion
      tags:
        - question
      parameters:
        - in: path
          name: id
          description: Id of the question being answered
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/answerQuestion"
      responses:
        '200':
          description: Question answer updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Question with the provided id does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /questions/:id/upvote:
    post:
      summary: Upvote question
      operationId: upvoteQuestion
      tags:
        - question
      parameters:
        - in: path
          name: id
          description: Id of the question being upvoted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Question answer updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        '404':
          description: Question with the provided id does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /questions/:id/downvote:
    post:
      summary: Downvote question
      operationId: downvoteQuestion
      tags:
        - question
      parameters:
        - in: path
          name: id
          description: Id of the question being upvoted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Question answer updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        '404':
          description: Question with the provided id does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /search:
    get:
      summary: Search questions
      operationId: searchQuestions
      tags:
        - question
      parameters:
        - in: query
          name: searchTerm
          description: Global search term on questions, answers, or username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search results based on the search query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionsResponse"
        '400':
          description: Bad Request. Please ensure the search query is provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      

components:
  requestBodies:
    answerQuestion:
      description: Request data to answer question
      content:
        application/json:
          schema:
            type: object
            required:
              - text
              - username
            properties:
              text:
                type: string
              username:
                type: string
                description: username of the user answering the question
    askQuestion:
      description: Request data for a user to ask a question
      content:
        application/json:
          schema:
            type: object
            required:
              - title
              - question
            properties:
              title:
                type: string
              question:
                type: string
    createUser:
      description: Request data to create a new user
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
              - displayName
            properties:
              email:
                type: string
              password:
                type: string
              displayName:
                type: string
    userLogin:
      description: Request data to authenticate a user
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - displayName
        - username
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        displayName:
          type: string
        username:
          type: string
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Question:
      type: object
      required:
        - id
        - title
        - question
        - username
        - answers
        - upvote
        - downvote
        - createdAt
        - answeredAt
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        question:
          type: string
        username:
          type: string
          description: Username of the user that asked the question
        answers:
          $ref: "#/components/schemas/Answers"
        upvote:
          type: integer
        downvote:
          type: integer
        createdAt:
          type: string
        answeredAt:
          type: string
    QuestionResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
        data:
          $ref: "#/components/schemas/Question"
    Questions:
      type: array
      items:
        $ref: "#/components/schemas/Question"
    QuestionsResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
        data:
          $ref: "#/components/schemas/Questions"
    Answer:
      type: object
      required:
        - id
        - text
        - username
        - createdAt
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        username:
          type: string
          description: username of the user that answered the question
        createdAt:
          type: string
          description: The date the question was answered
    Answers:
      type: array
      items:
        $ref: "#/components/schemas/Answer"
    AuthUser:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
        data:
          type: object
          $ref: "#/components/schemas/AuthUserDetails"
    AuthUserDetails:
      type: object
      required:
        - jwtToken
        - email
        - displayName
      properties:
        jwtToken:
          type: string
        email:
          type: string
        displayName:
          type: string
    Success:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
        message:
          type: string
    Error:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
        message:
          type: string